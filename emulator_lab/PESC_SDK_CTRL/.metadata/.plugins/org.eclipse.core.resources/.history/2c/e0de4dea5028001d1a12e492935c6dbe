#include "RampFilter.hpp"
#include <cmath>
#include <types.hpp>

fp32_t& RampFilter::Run(const fp32_t& input,const fp32_t& ActualValue,const bool& Accelerate)
{
	if(input >= m_max ){
		m_input_used=m_max;
		b_in_limit  =true;
	}
	else if(input <= m_min ){
		m_input_used=m_min;
		b_in_limit  =true;
	}
	else {
		m_input_used=input;
		b_in_limit  =false;
	}

	m_output_old= fmin(fmax(m_output_used,m_min) , m_max);

	m_error     = m_input_used-m_output_old;
	if (m_error >= 0.0){
		if (m_error >= m_error_max){
			if (m_output_old >=0.0){
				m_integral_input=m_slope_increase;
			}
			else {
				m_integral_input=m_slope_decrease;
			}
			b_error_max=true;
		}
		else {
			m_integral_input=m_tsamp_tfilter*m_error;
			b_error_max=false;
	   }
	}
	else if(m_error < 0.0){
		if (m_error <= -m_error_max){
			if (m_output_old >=0.0){
				m_integral_input=-m_slope_decrease;
			}
			else {
				m_integral_input=-m_slope_increase;
			}
			b_error_max=true;
		}
		else {
			m_integral_input=m_tsamp_tfilter*m_error;
			b_error_max=false;
	   }
	}

	if (fabs(m_output_old-ActualValue) >= m_deviation_max){
		m_integral_input=0.0;
		b_deviation_max=true;
	}
	else {
		b_deviation_max=false;
	}

	if ( !Accelerate) {
		m_integral_input=0.0;
	}
	m_output_used = fmin(fmax(m_output_old+m_integral_input,m_min) , m_max);

	if (fabs(m_input_used-m_output_used)< 0.1*m_deviation_max){
		b_input_reached=true;
	}
	else{
		b_input_reached=false;
	}


	return m_output_used;
}

void RampFilter::SetParameters(const fp32_t& T_increase,const fp32_t& T_decrease,const fp32_t& max,const fp32_t& min,const fp32_t& error_max,const fp32_t& deviation_max, const fp32_t& t_samp)
{
	m_slope_increase = t_samp/T_increase;
	m_slope_decrease = t_samp/T_decrease;
	m_max            = max;
	m_min            = min;
	m_error_max      = fabs(error_max);
	m_deviation_max  = fabs(deviation_max);
	m_tsamp_tfilter =t_samp/(0.1*fmin(T_increase,T_decrease)); // To be tested....

}

void RampFilter:: SetValues(const fp32_t& output)
{
	m_output_used = fmin(fmax(output,m_min) , m_max);
	m_output_old  = m_output_used;
}
